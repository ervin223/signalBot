# payments.py

import os
import hmac
import hashlib
import logging

import httpx
from aiohttp import web
from aiogram import Bot

from db import get_conn

# ‚îÄ‚îÄ‚îÄ Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

API_KEY      = os.getenv("NOWPAYMENTS_API_KEY")
IPN_SECRET   = os.getenv("NOWPAYMENTS_IPN_SECRET")
IPN_CALLBACK = os.getenv("NOWPAYMENTS_IPN_URL")   # –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø—É—Ç—å /nowpayments/ipn
BASE_URL     = "https://api.nowpayments.io/v1"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))

# ‚îÄ‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ (invoice) –≤ NOWPayments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def create_invoice(amount: float, currency: str = "USD", order_id: str = None) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å—á—ë—Ç –≤ NOWPayments –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç API.
    order_id –æ–±—ã—á–Ω–æ —Ä–∞–≤–µ–Ω —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É Telegram user_id.
    """
    payload = {
        "price_amount":      amount,
        "price_currency":    currency,
        "order_id":          order_id,
        "order_description": "Subscription",
        "ipn_callback_url":  IPN_CALLBACK
    }
    headers = {
        "x-api-key":    API_KEY,
        "Content-Type": "application/json"
    }

    logging.info(f"Creating NOWPayments invoice for order_id={order_id}, amount={amount} {currency}")
    async with httpx.AsyncClient() as client:
        resp = await client.post(f"{BASE_URL}/invoice", json=payload, headers=headers)
        resp.raise_for_status()
        invoice = resp.json()
        logging.info(f"Invoice created: {invoice}")
        return invoice

# ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook‚Äô–æ–≤ IPN –æ—Ç NOWPayments ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_ipn(request: web.Request) -> web.Response:
    """
    –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ IPN-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç NOWPayments.
    –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ payment_status == "finished" –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    raw_body = await request.read()
    try:
        data = await request.json()
    except Exception:
        logging.exception("Failed to parse JSON from IPN")
        return web.Response(status=400, text="Bad JSON")

    sig_hdr = request.headers.get("x-nowpayments-signature", None)
    logging.info("=== NOWPayments IPN received ===")
    logging.info("Headers: %s", dict(request.headers))
    logging.info("Raw body: %s", raw_body)
    logging.info("Parsed JSON: %s", data)
    logging.info("Signature header: %s", sig_hdr)

    # === –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ HMAC-SHA512 ===
    # if not sig_hdr:
    #     logging.warning("Missing signature header ‚Äì rejecting")
    #     return web.Response(status=400, text="No signature")
    #
    # expected = hmac.new(IPN_SECRET.encode(), raw_body, hashlib.sha512).hexdigest()
    # if not hmac.compare_digest(expected, sig_hdr):
    #     logging.warning("Bad IPN signature ‚Äì rejecting")
    #     return web.Response(status=400, text="Invalid signature")
    # ================================================

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if data.get("payment_status") == "finished":
        try:
            user_id = int(data.get("order_id", 0))
            logging.info(f"Activating subscription for user_id={user_id}")

            conn = get_conn()
            cur  = conn.cursor()
            cur.execute(
                """
                UPDATE users
                   SET is_subscribed = 1,
                       subscription_until = DATE_ADD(NOW(), INTERVAL 30 DAY)
                 WHERE user_id = %s
                """,
                (user_id,)
            )
            conn.commit()
            rows = cur.rowcount
            cur.close()
            conn.close()
            logging.info(f"Database updated, rows affected: {rows}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await bot.send_message(
                user_id,
                "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π."
            )
            logging.info(f"Sent confirmation message to {user_id}")

        except Exception:
            logging.exception("Error while activating subscription")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã NOWPayments –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –ø–æ–ø—ã—Ç–∫–∏
    return web.Response(text="OK")
